{"version":3,"sources":["logo.svg","PomodoroClock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PomodoroClock","useState","breakLength","setBreakLength","sessionLength","setSessionLength","timeLeft","setTimeLeft","running","setRunning","timer","setTimer","useEffect","minutes","date","Date","setSeconds","toISOString","substr","timerString","id","onClick","prevBreakLength","prevSessionLength","clearInterval","setInterval","prevTimeLeft","str","newArr","split","Number","timerStringDecrement","prevRunning","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,oHCqH5BC,MAnHf,WAA0B,IAAD,EACeC,mBAAS,GADxB,mBAChBC,EADgB,KACHC,EADG,OAEmBF,mBAAS,IAF5B,mBAEhBG,EAFgB,KAEDC,EAFC,OAGSJ,mBAAS,MAHlB,mBAGhBK,EAHgB,KAGNC,EAHM,OAION,oBAAS,GAJhB,mBAIhBO,EAJgB,KAIPC,EAJO,OAKGR,mBAAS,MALZ,mBAKhBS,EALgB,KAKTC,EALS,KA8DvB,OApBAC,qBAAU,WACRL,EAdF,SAAqBM,GACnB,IAAIC,EAAO,IAAIC,KAAK,MAEpB,OADAD,EAAKE,WAAqB,GAAVH,GACTC,EAAKG,cAAcC,OAAO,GAAI,GAWzBC,CAAYf,MACvB,CAACA,IAmBF,6BACE,yBAAKgB,GAAG,SACN,yBAAKA,GAAG,eACN,+CAEF,4BACEA,GAAG,kBACHC,QAASnB,EAAc,EA1D/B,WACEC,GAAe,SAAAmB,GAAe,OAAIA,EAAkB,MAyDF,MAF9C,OAMA,0BAAMF,GAAG,gBAAgBlB,GACzB,4BACEkB,GAAG,kBACHC,QAASnB,EAAc,GA7D/B,WACEC,GAAe,SAAAmB,GAAe,OAAIA,EAAkB,MA4DD,MAF/C,QAOF,yBAAKF,GAAG,WACN,yBAAKA,GAAG,iBACN,iDAEF,4BACEA,GAAG,oBACHC,QAASjB,EAAgB,EApEjC,WACEC,GAAiB,SAAAkB,GAAiB,OAAIA,EAAoB,MAmEJ,MAFlD,OAMA,0BAAMH,GAAG,kBAAkBhB,GAC3B,4BACEgB,GAAG,oBACHC,QAASjB,EAAgB,GAvEjC,WACEC,GAAiB,SAAAkB,GAAiB,OAAIA,EAAoB,MAsEH,MAFnD,QAOF,yBAAKH,GAAG,SACN,0BAAMA,GAAG,eAAT,WACA,6BACA,0BAAMA,GAAG,aAAad,GACtB,4BAAQc,GAAG,aAAaC,QAASb,EA/CvC,WACEgB,cAAcd,GACdD,GAAW,IAbb,WACEE,EACEc,aAAY,WACVlB,GAAY,SAAAmB,GACV,OAfR,SAA8BC,GAC5B,IAAIC,EAASD,EAAIE,MAAM,KACnBf,EAAO,IAAIC,KAAK,MAEpB,OADAD,EAAKE,WAA+B,GAApBc,OAAOF,EAAO,IAAWE,OAAOF,EAAO,IAAM,GACtDd,EAAKG,cAAcC,OAAO,GAAI,GAWxBa,CAAqBL,QAE7B,MAELjB,GAAW,SAAAuB,GAAW,OAAKA,OAkDvB,cAGA,4BAAQZ,GAAG,QAAQC,QApGzB,WACElB,EAAe,GACfE,EAAiB,MAkGb,YCnGO4B,MAJf,WACE,OAAO,kBAAC,EAAD,OCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8f7dcbb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction PomodoroClock() {\r\n  const [breakLength, setBreakLength] = useState(5);\r\n  const [sessionLength, setSessionLength] = useState(25);\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n  const [running, setRunning] = useState(false);\r\n  const [timer, setTimer] = useState(null);\r\n\r\n  function reset() {\r\n    setBreakLength(5);\r\n    setSessionLength(25);\r\n  }\r\n\r\n  function breakDecrement() {\r\n    setBreakLength(prevBreakLength => prevBreakLength - 1);\r\n  }\r\n\r\n  function breakIncrement() {\r\n    setBreakLength(prevBreakLength => prevBreakLength + 1);\r\n  }\r\n\r\n  function sessionDecrement() {\r\n    setSessionLength(prevSessionLength => prevSessionLength - 1);\r\n  }\r\n\r\n  function sessionIncrement() {\r\n    setSessionLength(prevSessionLength => prevSessionLength + 1);\r\n  }\r\n\r\n  //https://stackoverflow.com/questions/6312993/javascript-seconds-to-time-string-with-format-hhmmss\r\n  function timerString(minutes) {\r\n    var date = new Date(null);\r\n    date.setSeconds(minutes * 60); // specify value for SECONDS here\r\n    return date.toISOString().substr(14, 5);\r\n  }\r\n\r\n  function timerStringDecrement(str) {\r\n    let newArr = str.split(\":\");\r\n    var date = new Date(null);\r\n    date.setSeconds(Number(newArr[0]) * 60 + Number(newArr[1]) - 1);\r\n    return date.toISOString().substr(14, 5);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTimeLeft(timerString(sessionLength));\r\n  }, [sessionLength]);\r\n\r\n  function startRunning() {\r\n    setTimer(\r\n      setInterval(() => {\r\n        setTimeLeft(prevTimeLeft => {\r\n          return timerStringDecrement(prevTimeLeft);\r\n        });\r\n      }, 1000)\r\n    );\r\n    setRunning(prevRunning => !prevRunning);\r\n  }\r\n\r\n  function stopRunning() {\r\n    clearInterval(timer);\r\n    setRunning(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"break\">\r\n        <div id=\"break-label\">\r\n          <span>Break Length</span>\r\n        </div>\r\n        <button\r\n          id=\"break-decrement\"\r\n          onClick={breakLength > 0 ? breakDecrement : null}\r\n        >\r\n          Dec\r\n        </button>\r\n        <span id=\"break-length\">{breakLength}</span>\r\n        <button\r\n          id=\"break-increment\"\r\n          onClick={breakLength < 60 ? breakIncrement : null}\r\n        >\r\n          Inc\r\n        </button>\r\n      </div>\r\n      <div id=\"session\">\r\n        <div id=\"session-label\">\r\n          <span>Session Length</span>\r\n        </div>\r\n        <button\r\n          id=\"session-decrement\"\r\n          onClick={sessionLength > 0 ? sessionDecrement : null}\r\n        >\r\n          Dec\r\n        </button>\r\n        <span id=\"session-length\">{sessionLength}</span>\r\n        <button\r\n          id=\"session-increment\"\r\n          onClick={sessionLength < 60 ? sessionIncrement : null}\r\n        >\r\n          Inc\r\n        </button>\r\n      </div>\r\n      <div id=\"timer\">\r\n        <span id=\"timer-label\">Session</span>\r\n        <br />\r\n        <span id=\"time-left\">{timeLeft}</span>\r\n        <button id=\"start_stop\" onClick={running ? stopRunning : startRunning}>\r\n          Start/Stop\r\n        </button>\r\n        <button id=\"reset\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PomodoroClock;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./PomodoroClock\";\nimport PomodoroClock from \"./PomodoroClock\";\n\nfunction App() {\n  return <PomodoroClock />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}